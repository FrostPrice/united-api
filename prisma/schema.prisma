// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id // User CPF
  email         String         @unique
  name          String
  password      String
  role          String
  profile_img   String?
  telephone1    String
  telephone2    String?
  status        String
  course        String
  currentPeriod Int
  totalPeriods  Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Notification  Notification[]
  Event         Event[]
  Enrollment    Enrollment[]
}

model Notification {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  type        String
  status      String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date_begin  DateTime @default(now()) @db.Timestamp(0)
  date_end    DateTime @default(now()) @db.Timestamp(0)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Professor {
  id      Int       @id @default(autoincrement())
  name    String
  email   String    @unique
  Courses Course[]
  Subject Subject[]
}

model Course {
  id          Int       @id @default(autoincrement())
  name        String
  Professor   Professor @relation(fields: [professorId], references: [id])
  professorId Int
  Subjects    Subject[]
}

model Subject {
  id               Int          @id @default(autoincrement())
  name             String
  courseId         Int
  professorId      Int
  period           String
  yearSemester     String
  status           String
  lastNotification DateTime
  Professor        Professor    @relation(fields: [professorId], references: [id])
  Course           Course       @relation(fields: [courseId], references: [id])
  Content          Content[]
  Assessment       Assessment[]
  Enrollment       Enrollment[]
}

model Content {
  id           Int      @id @default(autoincrement())
  subjectId    Int
  name         String
  lastModified DateTime @default(now())
  Subject      Subject  @relation(fields: [subjectId], references: [id])
}

model Assessment {
  id        Int      @id @default(autoincrement())
  subjectId Int
  name      String
  dueDate   DateTime
  status    String
  Subject   Subject  @relation(fields: [subjectId], references: [id])
  Grade     Grade[]
}

model Grade {
  id           Int        @id @default(autoincrement())
  assessmentId Int
  enrollmentId Int
  value        Float
  weight       Float
  Assessment   Assessment @relation(fields: [assessmentId], references: [id])
  Enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
}

model Enrollment {
  id        Int     @id @default(autoincrement())
  userId    String
  subjectId Int
  status    String
  absences  Int
  maxAbsences Int
  User      User    @relation(fields: [userId], references: [id])
  Subject   Subject @relation(fields: [subjectId], references: [id])
  Grades    Grade[]
}
